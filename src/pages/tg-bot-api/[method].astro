---
import { Effect, String } from "effect";
import Layout from "~/src/layouts/Main.astro";
import {
  getOneMethod,
  getAllMethodNames,
} from "~/src/tg-bot-playground/core/misc";

export async function getStaticPaths() {
  const allMethodNames = await getAllMethodNames().pipe(Effect.runPromise);
  return allMethodNames.map((method) => ({
    params: { method },
  }))
}

const { method: methodName } = Astro.params;

const method = await getOneMethod(methodName).pipe(Effect.runPromise);
const allMethodNames = await getAllMethodNames().pipe(Effect.runPromise);

const requiredFields = new Set(method.input?.required ?? []);
const properties = Object.entries(method.input?.properties ?? {});
---

<Layout
  title={methodName}
  iconName="robot-96"
  description=`telegram bot api method: ${methodName}`
  footerEnabled={false}
>
  <div class="flex h-screen overflow-hidden font-serif">
    <aside class="w-64 shrink-0 border-r border-gray-200 mr-2 overflow-y-auto">
      <ul>
        {
          allMethodNames.map((name) => {
            const prettyName = String.snakeToCamel(String.kebabToSnake(name))
            const isCurrent = name == methodName
            const className =
              isCurrent ? "text-lg text-blue-500" : "text-base";
            return (
              <li class={className}>
                <a
                  href={name}
                  aria-current={isCurrent ? "page" : undefined}
                  class={isCurrent
                    ? "text-blue-500 font-semibold"
                    : "text-gray-800 hover:text-blue-500"}
                >
                  {prettyName}
                </a>
              </li>
            );
          })
        }
      </ul>
    </aside>
    <div class="flex-1 overflow-y-auto">
      <h1 class="font-bold text-2xl">
        {String.snakeToCamel(String.kebabToSnake(method.name))}
      </h1>
      <p class="text-base mb-5" set:html={method.description} />
  <table class="min-w-full text-sm leading-6 divide-y divide-gray-200">
    <caption class="sr-only">
      Parameters for {methodName}
    </caption>

    <thead class="bg-gray-50 sticky top-0 z-10">
      <tr>
        <th scope="col" class="py-3 px-4 text-left font-semibold text-gray-900">
          Field
        </th>
        <th scope="col" class="py-3 px-4 text-left font-semibold text-gray-900">
          Description
        </th>
      </tr>
    </thead>

    <tbody class="divide-y divide-gray-200">
      {
        properties.map(([name, meta]) => (
          <tr class={requiredFields.has(name) ? "bg-blue-50/30" : undefined}>
            <td class="py-3 px-4 font-mono">
              <code>{name}</code>
              {requiredFields.has(name) && (
                <span
                  class="ml-1 text-red-600 font-semibold"
                  title="required"
                  aria-label="required"
                >*</span>
              )}
            </td>
            <td class="py-3 px-4" set:html={meta.description} />
          </tr>
        ))
      }
    </tbody>
  </table>
    </div>
  </div>
</Layout>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const main = document.querySelector("main");
    if (main) main.scrollTop = 0;

    const active = document.querySelector('aside [aria-current="page"]');
    if (active) {
      active.scrollIntoView({ block: "center", inline: "nearest" });
    }
  });
</script>
